import com.diffplug.spotless.LineEnding
import com.diffplug.spotless.extra.wtp.EclipseWtpFormatterStep
import java.nio.charset.StandardCharsets

// ---------------------------- Plugins ----------------------------
plugins {
	id "java"
	id "distribution"
	id "pmd"
	// https://mvnrepository.com/artifact/com.diffplug.spotless/spotless-plugin-gradle
	// https://plugins.gradle.org/plugin/com.diffplug.spotless
	id "com.diffplug.spotless" version "7.0.3"
	// https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs-gradle-plugin
	// https://plugins.gradle.org/plugin/com.github.spotbugs
	id "com.github.spotbugs" version "6.1.9"
	// https://plugins.gradle.org/plugin/com.github.node-gradle.node
	id "com.github.node-gradle.node" version "7.1.0"
	// https://plugins.gradle.org/plugin/org.cthing.locc
	id "org.cthing.locc" version "2.0.0"
}


group = proj_group
version = proj_version

// ---------------------------- Dependencies ----------------------------

allprojects {
	repositories {
		mavenCentral()
	}

	java {
		toolchain {
			languageVersion.set(JavaLanguageVersion.of(17))
			vendor = JvmVendorSpec.AZUL
		}
	}

	tasks.withType(JavaCompile).configureEach {
		options.encoding = StandardCharsets.UTF_8
	}
	tasks.withType(Javadoc).configureEach {
		options.encoding = StandardCharsets.UTF_8
		options.locale = "en_US"
	}

	configurations {
		implementation {
			exclude group: "commons-logging"
			exclude group: "com.google.code.findbugs", module: "annotations"
			exclude group: "com.google.code.findbugs", module: "jsr305"
			exclude group: "org.apache.groovy", module: "groovy-console"
		}
	}
}

// ---------------------------- Code QC ----------------------------
pmd {
	consoleOutput = true
	toolVersion = PMD_VER
}
spotbugs {
	toolVersion = SPOTBUGS_VER
}

def npmExec = System.getProperty('os.name').toLowerCase().contains('windows') ? '/npm.cmd' : '/bin/npm'
def nodeExec = System.getProperty('os.name').toLowerCase().contains('windows') ? '/node.exe' : '/bin/node'

spotless {
	encoding = StandardCharsets.UTF_8
	lineEndings = LineEnding.UNIX
	format 'misc', {
		target '**/*.md', '**/.gitignore', '**/.adoc', '*.md', '*.adoc', '.gitignore'
		trimTrailingWhitespace()
		endWithNewline()
	}
	java {
		target '**/*.java'
		importOrder()
		removeUnusedImports()
		palantirJavaFormat(PALANTIR_JAVA_FMT_VER).style("AOSP").formatJavadoc(true)
		trimTrailingWhitespace()
		endWithNewline()
	}
	groovyGradle {
		target '**/*.gradle', '*.gradle'
		importOrder()
		removeSemicolons()
		greclipse(ECLIPSE_JDT_VER)
		trimTrailingWhitespace()
		endWithNewline()
	}
	format 'xml', {
		target "ystr_core/**/*.xml", "ystr_demo/**/*.xml"
		eclipseWtp(EclipseWtpFormatterStep.XML, ECLIPSE_WTP_VER)
		trimTrailingWhitespace()
		endWithNewline()
	}
	//	format 'sh', {
	//		target '**/*.sh', "*.sh"
	//		prettier(['prettier': '3.3', 'prettier-plugin-sh': '0.14.0'])
	//		.config(['parser': 'sh', 'indent': 4, 'plugins': ['prettier-plugin-sh']])
	//		.npmExecutable("${tasks.named('npmSetup').get().npmDir.get()}${npmExec}")
	//		.nodeExecutable("${tasks.named('nodeSetup').get().nodeDir.get()}${nodeExec}")
	//		trimTrailingWhitespace()
	//		endWithNewline()
	//	}

	json {
		target '**/*.json', "*.json"
		targetExclude ".idea", "**/node_modules/**/*.json"
		jackson()
		trimTrailingWhitespace()
	}
	yaml {
		target '**/*.yml', "**/*.yaml", "*.yml", "*.yaml"
		jackson()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

//tasks.named('spotlessSh').configure {
//	it.dependsOn('nodeSetup', 'npmSetup')
//}

// ---------------------------- Count Lines of Code ----------------------------

tasks.countCodeLines {
	reports {
		xml.required = false
		html.required = true
		yaml.required = false
		json.required = true
		csv.required = true
		text.required = true
	}
}

// ---------------------------- Antora Docs Site ----------------------------

node {
	download = true
	version = NODE_VER
	distBaseUrl = "https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/"
	nodeProjectDir = file("src/antora")
}

def adocAtProjRoot = copySpec {
	from projectDir
	include '*.adoc'
}

tasks.register('antoraCopy', Copy) {
	into "src/antora/ROOT/modules/ROOT/pages/generated"
	with adocAtProjRoot
}

tasks.register('antora', NpxTask) {
	command = 'antora'
	args = [
		'--fetch',
		'antora-playbook.yml',
		'--stacktrace',
		"--log-format",
		"pretty"
	]
	dependsOn antoraCopy
}

tasks.register('antoraCopyJavadoc', Copy) {
	into "build/antora-site/placeholders/ystr-core-javadoc"
	from "ystr_core/build/docs/javadoc"
	dependsOn javadoc
	dependsOn antora
}
tasks.register("antoraZip", Zip){
	from "build/antora-site/"
	archiveFileName = "antora-site.zip"
	destinationDirectory = file("build")
	dependsOn antoraCopyJavadoc
}
tasks.register("copyAntoraZip", Copy){
	from "build/antora-site.zip"
	into "build/antora-site/"
	dependsOn antoraZip
}

tasks.register('serveAntora', NpxTask){
	command = "http-server"
	workingDir = file("build/antora-site")
	dependsOn copyAntoraZip
}

// ---------------------------- JVM Reporter ----------------------------

tasks.register("info"){
	var systemProperties = System.getProperties()
	var osName = systemProperties.get("os.name")
	var osArch = systemProperties.get("os.arch")

	var osVer = systemProperties.get("os.version")
	printf("OS: '%s' arch. %s ver. '%s'%n", osName, osArch, osVer)
	printf(
			"Java: '%s' ver. '%s' (Spec. ver. %s) by '%s' with JAVAHOME='%s'%n",
			systemProperties.get("java.runtime.name"),
			systemProperties.get("java.version"),
			systemProperties.get("java.specification.version"),
			systemProperties.get("java.vendor"),
			systemProperties.get("java.home"))
}
