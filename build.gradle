import com.diffplug.spotless.LineEnding

import java.nio.charset.StandardCharsets

// ---------------------------- Plugins ----------------------------
plugins {
	id "java"
	id "distribution"
	id "jacoco"
	id "jacoco-report-aggregation"
	id "pmd"
	// https://mvnrepository.com/artifact/com.diffplug.spotless/spotless-plugin-gradle
	// https://plugins.gradle.org/plugin/com.diffplug.spotless
	id "com.diffplug.spotless" version "6.25.0"
	// https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs-gradle-plugin
	// https://plugins.gradle.org/plugin/com.github.spotbugs
	id "com.github.spotbugs" version "6.0.15"
	// https://plugins.gradle.org/plugin/com.github.node-gradle.node
	id "com.github.node-gradle.node" version "7.0.2"
}

group = proj_group
version = proj_version

// ---------------------------- Dependencies ----------------------------

allprojects {
	repositories {
		mavenCentral()
	}

	java {
		toolchain {
			languageVersion.set(JavaLanguageVersion.of(17))
		}
	}

	tasks.withType(JavaCompile).configureEach {
		options.encoding = StandardCharsets.UTF_8
	}
	tasks.withType(Javadoc).configureEach {
		options.encoding = StandardCharsets.UTF_8
		options.locale = "en_US"
	}

	configurations {
		implementation {
			exclude group: "commons-logging"
			exclude group: "com.google.code.findbugs", module: "annotations"
			exclude group: "com.google.code.findbugs", module: "jsr305"
			exclude group: "org.apache.groovy", module: "groovy-console"
		}
	}
}

// ---------------------------- Testings ----------------------------
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	reports {
		xml.required = true
	}
}

// ---------------------------- Code QC ----------------------------
pmd {
	consoleOutput = true
	toolVersion = PMD_VER
}
spotbugs {
	toolVersion = SPOTBUGS_VER
}
spotless {
	encoding StandardCharsets.UTF_8
	lineEndings LineEnding.UNIX
	java {
		target '**/*.java'
		importOrder()
		removeUnusedImports()
		palantirJavaFormat(PALANTIR_JAVA_FMT_VER).style("AOSP").formatJavadoc(true)
	}
	shell {
		target '**/*.sh'
		shfmt('v3.8.0')
	}
	groovyGradle {
		target '**/*.gradle'
		importOrder()
		removeSemicolons()
		greclipse(ECLIPSE_JDT_VER)
	}
	format 'xml', {
		target "ystr_core/**/*.xml", "ystr_demo/**/*.xml"
		eclipseWtp('xml')
	}
	yaml {
		target '**/*.yml', "**/*.yaml"
		jackson()
	}
}

node {
	download = true
	version = NODE_VER
	nodeProjectDir = file("src/antora")
}

def adocAtProjRoot = copySpec {
	from projectDir
	include '*.adoc'
}

tasks.register('antoraCopy', Copy) {
	into "src/antora/ROOT/modules/ROOT/pages/generated"
	with adocAtProjRoot
}

tasks.register('antora', NpxTask) {
	command = 'antora'
	args = [
		'--fetch',
		'antora-playbook.yml',
		'--stacktrace',
			"--log-format",
			"pretty"
	]
	dependsOn antoraCopy
}

tasks.register('antoraCopyJavadoc', Copy) {
	into "build/antora-site/placeholders/ystr-core-javadoc"
	from "ystr_core/build/docs/javadoc"
	dependsOn javadoc
	dependsOn antora
}
tasks.register("antoraZip", Zip){
	from "build/antora-site/"
	archiveFileName = "antora-site.zip"
	destinationDirectory = file("build")
	dependsOn antoraCopyJavadoc
}
tasks.register("copyAntoraZip", Copy){
	from "build/antora-site.zip"
	into "build/antora-site/"
	dependsOn antoraZip
}

tasks.register('serveAntora', NpxTask){
	command = "http-server"
	workingDir = file("build/antora-site")
	dependsOn copyAntoraZip
}
