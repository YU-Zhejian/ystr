import com.diffplug.spotless.LineEnding
import java.nio.charset.StandardCharsets

// ---------------------------- Plugins ----------------------------
plugins {
	id "java"
	id "distribution"
	// id "application"
	id "jacoco"
	id "jacoco-report-aggregation"
	id "pmd"
	// https://mvnrepository.com/artifact/com.diffplug.spotless/spotless-plugin-gradle
	// https://plugins.gradle.org/plugin/com.diffplug.spotless
	id "com.diffplug.spotless" version "6.25.0"
	// https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs-gradle-plugin
	// https://plugins.gradle.org/plugin/com.github.spotbugs
	id "com.github.spotbugs" version "6.0.15"
}

group = findProperty("proj_group")
version = findProperty("proj_version")

// ---------------------------- Dependencies ----------------------------

allprojects {
	repositories {
		mavenCentral()
	}

	java {
		toolchain {
			languageVersion.set(JavaLanguageVersion.of(17))
		}
	}


	configurations {
		implementation {
			exclude group: "commons-logging"
			exclude group: "com.google.code.findbugs", module: "annotations"
			exclude group: "com.google.code.findbugs", module: "jsr305"
			exclude group: "org.apache.groovy", module: "groovy-console"
		}
	}
}


// ---------------------------- Compiling Java Sources ----------------------------

tasks.javadoc {
	options.encoding = StandardCharsets.UTF_8
	options.locale = 'en_US'
}
tasks.withType(JavaCompile).configureEach {
	options.encoding = StandardCharsets.UTF_8
}

// ---------------------------- Testings ----------------------------
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	reports {
		xml.required = true
	}
}

// ---------------------------- Code QC ----------------------------
pmd {
	consoleOutput = true
	toolVersion = PMD_VER
}
spotbugs {
	toolVersion = SPOTBUGS_VER
}
spotless {
	encoding StandardCharsets.UTF_8
	lineEndings LineEnding.UNIX
	java {
		target fileTree(".") {
			include '**/*.java'
		}
		importOrder()
		removeUnusedImports()
		palantirJavaFormat(PALANTIR_JAVA_FMT_VER).style("AOSP").formatJavadoc(true)
	}
//	groovyGradle {
//		target fileTree(".") {
//			include '**/build.gradle'
//		}
//		importOrder()
//		removeSemicolons()
//		greclipse(ECLIPSE_JDT_VER)
//	}
}
