import com.diffplug.spotless.LineEnding
import java.nio.charset.StandardCharsets

// ---------------------------- Plugins ----------------------------
plugins {
	id "java"
	id "distribution"
	id "jacoco"
	id "jacoco-report-aggregation"
	id "pmd"
	// https://mvnrepository.com/artifact/com.diffplug.spotless/spotless-plugin-gradle
	// https://plugins.gradle.org/plugin/com.diffplug.spotless
	id "com.diffplug.spotless" version "6.25.0"
	// https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs-gradle-plugin
	// https://plugins.gradle.org/plugin/com.github.spotbugs
	id "com.github.spotbugs" version "6.0.15"
	// https://plugins.gradle.org/plugin/org.asciidoctor.jvm.convert
	id 'org.asciidoctor.jvm.convert' version '4.0.2'
}

group = "${proj_group}"
version = "${proj_version}"

// ---------------------------- Dependencies ----------------------------

allprojects {
	repositories {
		mavenCentral()
	}

	java {
		toolchain {
			languageVersion.set(JavaLanguageVersion.of(17))
		}
	}

	tasks.withType(JavaCompile).configureEach {
		options.encoding = StandardCharsets.UTF_8
	}
	tasks.withType(Javadoc).configureEach {
		options.encoding = StandardCharsets.UTF_8
		options.locale = 'en_US'
	}

	configurations {
		implementation {
			exclude group: "commons-logging"
			exclude group: "com.google.code.findbugs", module: "annotations"
			exclude group: "com.google.code.findbugs", module: "jsr305"
			exclude group: "org.apache.groovy", module: "groovy-console"
		}
	}
}

// ---------------------------- Testings ----------------------------
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	reports {
		xml.required = true
	}
}

// ---------------------------- Code QC ----------------------------
pmd {
	consoleOutput = true
	toolVersion = PMD_VER
}
spotbugs {
	toolVersion = SPOTBUGS_VER
}
spotless {
	encoding StandardCharsets.UTF_8
	lineEndings LineEnding.UNIX
	java {
		target '**/*.java'
		importOrder()
		removeUnusedImports()
		palantirJavaFormat(PALANTIR_JAVA_FMT_VER).style("AOSP").formatJavadoc(true)
	}
	shell {
		target '**/*.sh'
		shfmt('v3.8.0')
	}
	groovyGradle {
		target '**/*.gradle'
		importOrder()
		removeSemicolons()
		greclipse(ECLIPSE_JDT_VER)
	}
	format 'xml', {
		target 'src/**/*.xml'
		eclipseWtp('xml')
	}
}
asciidoctor {
	sourceDir  file('src/docs')
	outputDir  file('build/docs')
}
