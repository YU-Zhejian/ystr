package com.github.yu_zhejian.ystr.hash;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;
import org.junit.jupiter.api.Test;

import java.nio.charset.StandardCharsets;

class FNV1BaseTest {

    @Contract(pure = true)
    private static byte @NotNull [] getBytes(@NotNull String s) {
        return s.getBytes(StandardCharsets.US_ASCII);
    }

    @Contract(pure = true)
    private static byte @NotNull [] getBytesSlashX(@NotNull String s) {
        var dst = new byte[s.length() >> 1];
        var sPos = 0;
        for (int i = 0; i < dst.length; i++) {
            dst[i] = (byte) Integer.parseInt(s.substring(sPos, sPos + 2), 16);
            sPos += 2;
        }
        return dst;
    }

    @Contract(pure = true)
    private static byte @NotNull [] getBytesWithTerminatingZero(String s) {
        return (s + "\0").getBytes(StandardCharsets.US_ASCII);
    }

    private static @NotNull String repeat10(String s) {
        return String.valueOf(s).repeat(10);
    }

    private static @NotNull String repeat500(String s) {
        return String.valueOf(s).repeat(500);
    }

    private static final byte[][] TEST_SOURCE = {
        getBytes(""),
        getBytes("a"),
        getBytes("b"),
        getBytes("c"),
        getBytes("d"),
        getBytes("e"),
        getBytes("f"),
        getBytes("fo"),
        getBytes("foo"),
        getBytes("foob"),
        getBytes("fooba"),
        getBytes("foobar"),
        getBytesWithTerminatingZero(""),
        getBytesWithTerminatingZero("a"),
        getBytesWithTerminatingZero("b"),
        getBytesWithTerminatingZero("c"),
        getBytesWithTerminatingZero("d"),
        getBytesWithTerminatingZero("e"),
        getBytesWithTerminatingZero("f"),
        getBytesWithTerminatingZero("fo"),
        getBytesWithTerminatingZero("foo"),
        getBytesWithTerminatingZero("foob"),
        getBytesWithTerminatingZero("fooba"),
        getBytesWithTerminatingZero("foobar"),
        getBytes("ch"),
        getBytes("cho"),
        getBytes("chon"),
        getBytes("chong"),
        getBytes("chongo"),
        getBytes("chongo "),
        getBytes("chongo w"),
        getBytes("chongo wa"),
        getBytes("chongo was"),
        getBytes("chongo was "),
        getBytes("chongo was h"),
        getBytes("chongo was he"),
        getBytes("chongo was her"),
        getBytes("chongo was here"),
        getBytes("chongo was here!"),
        getBytes("chongo was here!\n"),
        getBytesWithTerminatingZero("ch"),
        getBytesWithTerminatingZero("cho"),
        getBytesWithTerminatingZero("chon"),
        getBytesWithTerminatingZero("chong"),
        getBytesWithTerminatingZero("chongo"),
        getBytesWithTerminatingZero("chongo "),
        getBytesWithTerminatingZero("chongo w"),
        getBytesWithTerminatingZero("chongo wa"),
        getBytesWithTerminatingZero("chongo was"),
        getBytesWithTerminatingZero("chongo was "),
        getBytesWithTerminatingZero("chongo was h"),
        getBytesWithTerminatingZero("chongo was he"),
        getBytesWithTerminatingZero("chongo was her"),
        getBytesWithTerminatingZero("chongo was here"),
        getBytesWithTerminatingZero("chongo was here!"),
        getBytesWithTerminatingZero("chongo was here!\n"),
        getBytes("cu"),
        getBytes("cur"),
        getBytes("curd"),
        getBytes("curds"),
        getBytes("curds "),
        getBytes("curds a"),
        getBytes("curds an"),
        getBytes("curds and"),
        getBytes("curds and "),
        getBytes("curds and w"),
        getBytes("curds and wh"),
        getBytes("curds and whe"),
        getBytes("curds and whey"),
        getBytes("curds and whey\n"),
        getBytesWithTerminatingZero("cu"),
        getBytesWithTerminatingZero("cur"),
        getBytesWithTerminatingZero("curd"),
        getBytesWithTerminatingZero("curds"),
        getBytesWithTerminatingZero("curds "),
        getBytesWithTerminatingZero("curds a"),
        getBytesWithTerminatingZero("curds an"),
        getBytesWithTerminatingZero("curds and"),
        getBytesWithTerminatingZero("curds and "),
        getBytesWithTerminatingZero("curds and w"),
        getBytesWithTerminatingZero("curds and wh"),
        getBytesWithTerminatingZero("curds and whe"),
        getBytesWithTerminatingZero("curds and whey"),
        getBytesWithTerminatingZero("curds and whey\n"),
        getBytes("hi"),
        getBytesWithTerminatingZero("hi"),
        getBytes("hello"),
        getBytesWithTerminatingZero("hello"),
        getBytesSlashX("ff000001"),
        getBytesSlashX("010000ff"),
        getBytesSlashX("ff000002"),
        getBytesSlashX("020000ff"),
        getBytesSlashX("ff000003"),
        getBytesSlashX("030000ff"),
        getBytesSlashX("ff000004"),
        getBytesSlashX("040000ff"),
        getBytesSlashX("40514e44"),
        getBytesSlashX("444e5140"),
        getBytesSlashX("40514e4a"),
        getBytesSlashX("4a4e5140"),
        getBytesSlashX("40514e54"),
        getBytesSlashX("544e5140"),
        getBytes("127.0.0.1"),
        getBytesWithTerminatingZero("127.0.0.1"),
        getBytes("127.0.0.2"),
        getBytesWithTerminatingZero("127.0.0.2"),
        getBytes("127.0.0.3"),
        getBytesWithTerminatingZero("127.0.0.3"),
        getBytes("64.81.78.68"),
        getBytesWithTerminatingZero("64.81.78.68"),
        getBytes("64.81.78.74"),
        getBytesWithTerminatingZero("64.81.78.74"),
        getBytes("64.81.78.84"),
        getBytesWithTerminatingZero("64.81.78.84"),
        getBytes("feedface"),
        getBytesWithTerminatingZero("feedface"),
        getBytes("feedfacedaffdeed"),
        getBytesWithTerminatingZero("feedfacedaffdeed"),
        getBytes("feedfacedeadbeef"),
        getBytesWithTerminatingZero("feedfacedeadbeef"),
        getBytes("line 1\nline 2\nline 3"),
        getBytes("chongo <Landon Curt Noll> /\\../\\"),
        getBytesWithTerminatingZero("chongo <Landon Curt Noll> /\\../\\"),
        getBytes("chongo (Landon Curt Noll) /\\../\\"),
        getBytesWithTerminatingZero("chongo (Landon Curt Noll) /\\../\\"),
        getBytes("http://antwrp.gsfc.nasa.gov/apod/astropix.html"),
        getBytes("http://en.wikipedia.org/wiki/Fowler_Noll_Vo_hash"),
        getBytes("http://epod.usra.edu/"),
        getBytes("http://exoplanet.eu/"),
        getBytes("http://hvo.wr.usgs.gov/cam3/"),
        getBytes("http://hvo.wr.usgs.gov/cams/HMcam/"),
        getBytes("http://hvo.wr.usgs.gov/kilauea/update/deformation.html"),
        getBytes("http://hvo.wr.usgs.gov/kilauea/update/images.html"),
        getBytes("http://hvo.wr.usgs.gov/kilauea/update/maps.html"),
        getBytes("http://hvo.wr.usgs.gov/volcanowatch/current_issue.html"),
        getBytes("http://neo.jpl.nasa.gov/risk/"),
        getBytes("http://norvig.com/21-days.html"),
        getBytes("http://primes.utm.edu/curios/home.php"),
        getBytes("http://slashdot.org/"),
        getBytes("http://tux.wr.usgs.gov/Maps/155.25-19.5.html"),
        getBytes("http://volcano.wr.usgs.gov/kilaueastatus.php"),
        getBytes("http://www.avo.alaska.edu/activity/Redoubt.php"),
        getBytes("http://www.dilbert.com/fast/"),
        getBytes("http://www.fourmilab.ch/gravitation/orbits/"),
        getBytes("http://www.fpoa.net/"),
        getBytes("http://www.ioccc.org/index.html"),
        getBytes("http://www.isthe.com/cgi-bin/number.cgi"),
        getBytes("http://www.isthe.com/chongo/bio.html"),
        getBytes("http://www.isthe.com/chongo/index.html"),
        getBytes("http://www.isthe.com/chongo/src/calc/lucas-calc"),
        getBytes("http://www.isthe.com/chongo/tech/astro/venus2004.html"),
        getBytes("http://www.isthe.com/chongo/tech/astro/vita.html"),
        getBytes("http://www.isthe.com/chongo/tech/comp/c/expert.html"),
        getBytes("http://www.isthe.com/chongo/tech/comp/calc/index.html"),
        getBytes("http://www.isthe.com/chongo/tech/comp/fnv/index.html"),
        getBytes("http://www.isthe.com/chongo/tech/math/number/howhigh.html"),
        getBytes("http://www.isthe.com/chongo/tech/math/number/number.html"),
        getBytes("http://www.isthe.com/chongo/tech/math/prime/mersenne.html"),
        getBytes("http://www.isthe.com/chongo/tech/math/prime/mersenne.html#largest"),
        getBytes("http://www.lavarnd.org/cgi-bin/corpspeak.cgi"),
        getBytes("http://www.lavarnd.org/cgi-bin/haiku.cgi"),
        getBytes("http://www.lavarnd.org/cgi-bin/rand-none.cgi"),
        getBytes("http://www.lavarnd.org/cgi-bin/randdist.cgi"),
        getBytes("http://www.lavarnd.org/index.html"),
        getBytes("http://www.lavarnd.org/what/nist-test.html"),
        getBytes("http://www.macosxhints.com/"),
        getBytes("http://www.mellis.com/"),
        getBytes("http://www.nature.nps.gov/air/webcams/parks/havoso2alert/havoalert.cfm"),
        getBytes("http://www.nature.nps.gov/air/webcams/parks/havoso2alert/timelines_24.cfm"),
        getBytes("http://www.paulnoll.com/"),
        getBytes("http://www.pepysdiary.com/"),
        getBytes("http://www.sciencenews.org/index/home/activity/view"),
        getBytes("http://www.skyandtelescope.com/"),
        getBytes("http://www.sput.nl/~rob/sirius.html"),
        getBytes("http://www.systemexperts.com/"),
        getBytes("http://www.tq-international.com/phpBB3/index.php"),
        getBytes("http://www.travelquesttours.com/index.htm"),
        getBytes("http://www.wunderground.com/global/stations/89606.html"),
        getBytes(repeat10("21701")),
        getBytes(repeat10("M21701")),
        getBytes(repeat10("2^21701-1")),
        getBytesSlashX(repeat10("54c5")),
        getBytesSlashX(repeat10("c554")),
        getBytes(repeat10("23209")),
        getBytes(repeat10("M23209")),
        getBytes(repeat10("2^23209-1")),
        getBytesSlashX(repeat10("5aa9")),
        getBytesSlashX(repeat10("a95a")),
        getBytes(repeat10("391581216093")),
        getBytes(repeat10("391581*2^216093-1")),
        getBytesSlashX(repeat10("05f99d034c81")),
        getBytes(repeat10("FEDCBA9876543210")),
        getBytesSlashX(repeat10("fedcba9876543210")),
        getBytes(repeat10("EFCDAB8967452301")),
        getBytesSlashX(repeat10("efcdab8967452301")),
        getBytes(repeat10("0123456789ABCDEF")),
        getBytesSlashX(repeat10("0123456789abcdef")),
        getBytes(repeat10("1032547698BADCFE")),
        getBytesSlashX(repeat10("1032547698badcfe")),
        getBytesSlashX(repeat500("00")),
        getBytesSlashX(repeat500("07")),
        getBytes(repeat500("~")),
        getBytesSlashX(repeat500("7f"))
    };

    private static final int[] INT_FNV1A_RES = {
        0x811c9dc5,
        0xe40c292c,
        0xe70c2de5,
        0xe60c2c52,
        0xe10c2473,
        0xe00c22e0,
        0xe30c2799,
        0x6222e842,
        0xa9f37ed7,
        0x3f5076ef,
        0x39aaa18a,
        0xbf9cf968,
        0x050c5d1f,
        0x2b24d044,
        0x9d2c3f7f,
        0x7729c516,
        0xb91d6109,
        0x931ae6a0,
        0x052255db,
        0xbef39fe6,
        0x6150ac75,
        0x9aab3a3d,
        0x519c4c3e,
        0x0c1c9eb8,
        0x5f299f4e,
        0xef8580f3,
        0xac297727,
        0x4546b9c0,
        0xbd564e7d,
        0x6bdd5c67,
        0xdd77ed30,
        0xf4ca9683,
        0x4aeb9bd0,
        0xe0e67ad0,
        0xc2d32fa8,
        0x7f743fb7,
        0x6900631f,
        0xc59c990e,
        0x448524fd,
        0xd49930d5,
        0x1c85c7ca,
        0x0229fe89,
        0x2c469265,
        0xce566940,
        0x8bdd8ec7,
        0x34787625,
        0xd3ca6290,
        0xddeaf039,
        0xc0e64870,
        0xdad35570,
        0x5a740578,
        0x5b004d15,
        0x6a9c09cd,
        0x2384f10a,
        0xda993a47,
        0x8227df4f,
        0x4c298165,
        0xfc563735,
        0x8cb91483,
        0x775bf5d0,
        0xd5c428d0,
        0x34cc0ea3,
        0xea3b4cb7,
        0x8e59f029,
        0x2094de2b,
        0xa65a0ad4,
        0x9bbee5f4,
        0xbe836343,
        0x22d5344e,
        0x19a1470c,
        0x4a56b1ff,
        0x70b8e86f,
        0x0a5b4a39,
        0xb5c3f670,
        0x53cc3f70,
        0xc03b0a99,
        0x7259c415,
        0x4095108b,
        0x7559bdb1,
        0xb3bf0bbc,
        0x2183ff1c,
        0x2bd54279,
        0x23a156ca,
        0x64e2d7e4,
        0x683af69a,
        0xaed2346e,
        0x4f9f2cab,
        0x02935131,
        0xc48fb86d,
        0x2269f369,
        0xc18fb3b4,
        0x50ef1236,
        0xc28fb547,
        0x96c3bf47,
        0xbf8fb08e,
        0xf3e4d49c,
        0x32179058,
        0x280bfee6,
        0x30178d32,
        0x21addaf8,
        0x4217a988,
        0x772633d6,
        0x08a3d11e,
        0xb7e2323a,
        0x07a3cf8b,
        0x91dfb7d1,
        0x06a3cdf8,
        0x6bdd3d68,
        0x1d5636a7,
        0xd5b808e5,
        0x1353e852,
        0xbf16b916,
        0xa55b89ed,
        0x3c1a2017,
        0x0588b13c,
        0xf22f0174,
        0xe83641e1,
        0x6e69b533,
        0xf1760448,
        0x64c8bd58,
        0x97b4ea23,
        0x9a4e92e6,
        0xcfb14012,
        0xf01b2511,
        0x0bbb59c3,
        0xce524afa,
        0xdd16ef45,
        0x60648bb3,
        0x7fa4bcfc,
        0x5053ae17,
        0xc9302890,
        0x956ded32,
        0x9136db84,
        0xdf9d3323,
        0x32bb6cd0,
        0xc8f8385b,
        0xeb08bfba,
        0x62cc8e3d,
        0xc3e20f5c,
        0x39e97f17,
        0x7837b203,
        0x319e877b,
        0xd3e63f89,
        0x29b50b38,
        0x5ed678b8,
        0xb0d5b793,
        0x52450be5,
        0xfa72d767,
        0x95066709,
        0x7f52e123,
        0x76966481,
        0x063258b0,
        0x2ded6e8a,
        0xb07d7c52,
        0xd0c71b71,
        0xf684f1bd,
        0x868ecfa8,
        0xf794f684,
        0xd19701c3,
        0x346e171e,
        0x91f8f676,
        0x0bf58848,
        0x6317b6d1,
        0xafad4c54,
        0x0f25681e,
        0x91b18d49,
        0x7d61c12e,
        0x5147d25c,
        0x9a8b6805,
        0x4cd2a447,
        0x1e549b14,
        0x2fe1b574,
        0xcf0cd31e,
        0x6c471669,
        0x0e5eef1e,
        0x2bed3602,
        0xb26249e0,
        0x2c9b86a4,
        0xe415e2bb,
        0x18a98d1d,
        0xb7df8b7b,
        0x241e9075,
        0x063f70dd,
        0x0295aed9,
        0x56a7f781,
        0x253bc645,
        0x46610921,
        0x7c1577f9,
        0x512b2851,
        0x76823999,
        0xc0586935,
        0xf3415c85,
        0x0ae4ff65,
        0x58b79725,
        0xdea43aa5,
        0x2bb3be35,
        0xea777a45,
        0x8f21c305,
        0x5c9d0865,
        0xfa823dd5,
        0x21a27271,
        0x83c5c6d5,
        0x813b0881
    };

    private static final long[] LONG_FNV1A_RES = {
        0xcbf29ce484222325L,
        0xaf63dc4c8601ec8cL,
        0xaf63df4c8601f1a5L,
        0xaf63de4c8601eff2L,
        0xaf63d94c8601e773L,
        0xaf63d84c8601e5c0L,
        0xaf63db4c8601ead9L,
        0x08985907b541d342L,
        0xdcb27518fed9d577L,
        0xdd120e790c2512afL,
        0xcac165afa2fef40aL,
        0x85944171f73967e8L,
        0xaf63bd4c8601b7dfL,
        0x089be207b544f1e4L,
        0x08a61407b54d9b5fL,
        0x08a2ae07b54ab836L,
        0x0891b007b53c4869L,
        0x088e4a07b5396540L,
        0x08987c07b5420ebbL,
        0xdcb28a18fed9f926L,
        0xdd1270790c25b935L,
        0xcac146afa2febf5dL,
        0x8593d371f738acfeL,
        0x34531ca7168b8f38L,
        0x08a25607b54a22aeL,
        0xf5faf0190cf90df3L,
        0xf27397910b3221c7L,
        0x2c8c2b76062f22e0L,
        0xe150688c8217b8fdL,
        0xf35a83c10e4f1f87L,
        0xd1edd10b507344d0L,
        0x2a5ee739b3ddb8c3L,
        0xdcfb970ca1c0d310L,
        0x4054da76daa6da90L,
        0xf70a2ff589861368L,
        0x4c628b38aed25f17L,
        0x9dd1f6510f78189fL,
        0xa3de85bd491270ceL,
        0x858e2fa32a55e61dL,
        0x46810940eff5f915L,
        0xf5fadd190cf8edaaL,
        0xf273ed910b32b3e9L,
        0x2c8c5276062f6525L,
        0xe150b98c821842a0L,
        0xf35aa3c10e4f55e7L,
        0xd1ed680b50729265L,
        0x2a5f0639b3dded70L,
        0xdcfbaa0ca1c0f359L,
        0x4054ba76daa6a430L,
        0xf709c7f5898562b0L,
        0x4c62e638aed2f9b8L,
        0x9dd1a8510f779415L,
        0xa3de2abd4911d62dL,
        0x858e0ea32a55ae0aL,
        0x46810f40eff60347L,
        0xc33bce57bef63eafL,
        0x08a24307b54a0265L,
        0xf5b9fd190cc18d15L,
        0x4c968290ace35703L,
        0x07174bd5c64d9350L,
        0x5a294c3ff5d18750L,
        0x05b3c1aeb308b843L,
        0xb92a48da37d0f477L,
        0x73cdddccd80ebc49L,
        0xd58c4c13210a266bL,
        0xe78b6081243ec194L,
        0xb096f77096a39f34L,
        0xb425c54ff807b6a3L,
        0x23e520e2751bb46eL,
        0x1a0b44ccfe1385ecL,
        0xf5ba4b190cc2119fL,
        0x4c962690ace2baafL,
        0x0716ded5c64cda19L,
        0x5a292c3ff5d150f0L,
        0x05b3e0aeb308ecf0L,
        0xb92a5eda37d119d9L,
        0x73ce41ccd80f6635L,
        0xd58c2c132109f00bL,
        0xe78baf81243f47d1L,
        0xb0968f7096a2ee7cL,
        0xb425a84ff807855cL,
        0x23e4e9e2751b56f9L,
        0x1a0b4eccfe1396eaL,
        0x54abd453bb2c9004L,
        0x08ba5f07b55ec3daL,
        0x337354193006cb6eL,
        0xa430d84680aabd0bL,
        0xa9bc8acca21f39b1L,
        0x6961196491cc682dL,
        0xad2bb1774799dfe9L,
        0x6961166491cc6314L,
        0x8d1bb3904a3b1236L,
        0x6961176491cc64c7L,
        0xed205d87f40434c7L,
        0x6961146491cc5faeL,
        0xcd3baf5e44f8ad9cL,
        0xe3b36596127cd6d8L,
        0xf77f1072c8e8a646L,
        0xe3b36396127cd372L,
        0x6067dce9932ad458L,
        0xe3b37596127cf208L,
        0x4b7b10fa9fe83936L,
        0xaabafe7104d914beL,
        0xf4d3180b3cde3edaL,
        0xaabafd7104d9130bL,
        0xf4cfb20b3cdb5bb1L,
        0xaabafc7104d91158L,
        0xf4cc4c0b3cd87888L,
        0xe729bac5d2a8d3a7L,
        0x74bc0524f4dfa4c5L,
        0xe72630c5d2a5b352L,
        0x6b983224ef8fb456L,
        0xe73042c5d2ae266dL,
        0x8527e324fdeb4b37L,
        0x0a83c86fee952abcL,
        0x7318523267779d74L,
        0x3e66d3d56b8caca1L,
        0x956694a5c0095593L,
        0xcac54572bb1a6fc8L,
        0xa7a4c9f3edebf0d8L,
        0x7829851fac17b143L,
        0x2c8f4c9af81bcf06L,
        0xd34e31539740c732L,
        0x3605a2ac253d2db1L,
        0x08c11b8346f4a3c3L,
        0x6be396289ce8a6daL,
        0xd9b957fb7fe794c5L,
        0x05be33da04560a93L,
        0x0957f1577ba9747cL,
        0xda2cc3acc24fba57L,
        0x74136f185b29e7f0L,
        0xb2f2b4590edb93b2L,
        0xb3608fce8b86ae04L,
        0x4a3a865079359063L,
        0x5b3a7ef496880a50L,
        0x48fae3163854c23bL,
        0x07aaa640476e0b9aL,
        0x2f653656383a687dL,
        0xa1031f8e7599d79cL,
        0xa31908178ff92477L,
        0x097edf3c14c3fb83L,
        0xb51ca83feaa0971bL,
        0xdd3c0d96d784f2e9L,
        0x86cd26a9ea767d78L,
        0xe6b215ff54a30c18L,
        0xec5b06a1c5531093L,
        0x45665a929f9ec5e5L,
        0x8c7609b4a9f10907L,
        0x89aac3a491f0d729L,
        0x32ce6b26e0f4a403L,
        0x614ab44e02b53e01L,
        0xfa6472eb6eef3290L,
        0x9e5d75eb1948eb6aL,
        0xb6d12ad4a8671852L,
        0x88826f56eba07af1L,
        0x44535bf2645bc0fdL,
        0x169388ffc21e3728L,
        0xf68aac9e396d8224L,
        0x8e87d7e7472b3883L,
        0x295c26caa8b423deL,
        0x322c814292e72176L,
        0x8a06550eb8af7268L,
        0xef86d60e661bcf71L,
        0x9e5426c87f30ee54L,
        0xf1ea8aa826fd047eL,
        0x0babaf9a642cb769L,
        0x4b3341d4068d012eL,
        0xd15605cbc30a335cL,
        0x5b21060aed8412e5L,
        0x45e2cda1ce6f4227L,
        0x50ae3745033ad7d4L,
        0xaa4588ced46bf414L,
        0xc1b0056c4a95467eL,
        0x56576a71de8b4089L,
        0xbf20965fa6dc927eL,
        0x569f8383c2040882L,
        0xe1e772fba08feca0L,
        0x4ced94af97138ac4L,
        0xc4112ffb337a82fbL,
        0xd64a4fd41de38b7dL,
        0x4cfc32329edebcbbL,
        0x0803564445050395L,
        0xaa1574ecf4642ffdL,
        0x694bc4e54cc315f9L,
        0xa3d7cb273b011721L,
        0x577c2f8b6115bfa5L,
        0xb7ec8c1a769fb4c1L,
        0x5d5cfce63359ab19L,
        0x33b96c3cd65b5f71L,
        0xd845097780602bb9L,
        0x84d47645d02da3d5L,
        0x83544f33b58773a5L,
        0x9175cbb2160836c5L,
        0xc71b3bc175e72bc5L,
        0x636806ac222ec985L,
        0xb6ef0e6950f52ed5L,
        0xead3d8a0f3dfdaa5L,
        0x922908fe9a861ba5L,
        0x6d4821de275fd5c5L,
        0x1fe3fce62bd816b5L,
        0xc23e9fccd6f70591L,
        0xc1af12bdfe16b5b5L,
        0x39e9f18f2f85e221L
    };

    @Test
    void testGetBytesSlashX() {
        assertArrayEquals(new byte[] {0x54, (byte) 0x4e, 0x51, 0x40}, getBytesSlashX("544e5140"));
    }

    @Test
    void testIntFnv1a() {
        for (int i = 0; i < TEST_SOURCE.length; i++) {
            assertEquals(
                    INT_FNV1A_RES[i], HashInterface.fastHash(BitwiseFNV1a32::new, TEST_SOURCE[i]));
            assertEquals(
                    INT_FNV1A_RES[i], HashInterface.fastHash(MultiplyFNV1a32::new, TEST_SOURCE[i]));
        }
    }

    @Test
    void testLongFnv1a() {
        for (int i = 0; i < TEST_SOURCE.length; i++) {
            assertEquals(
                    LONG_FNV1A_RES[i], HashInterface.fastHash(BitwiseFNV1a64::new, TEST_SOURCE[i]));
            assertEquals(
                    LONG_FNV1A_RES[i],
                    HashInterface.fastHash(MultiplyFNV1a64::new, TEST_SOURCE[i]));
        }
    }
}
